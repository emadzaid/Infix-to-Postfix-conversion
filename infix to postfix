#include <iostream>
#include <cstdlib>

using namespace std;

struct stack
{
    int top;
    int size;
    char * arr;
};

bool isFull(struct  stack * sp)
{
    return sp->top == sp->size-1;
}

bool isEmpty(struct stack * sp)
{
    return sp->top == -1;
}

void push(struct stack * sp, int data)
{
    if(isFull(sp))
    {
        cout << "Stack overflow....\n";
    }
    else{
        sp->top++;
        sp->arr[sp->top] = data;
    }
}
    
int pop(struct stack * sp)
{
    if(isEmpty(sp))
    {
        cout << "Stack underflow...\n";
        return -1;
    }
    else
    {
        int val = sp->arr[sp->top];
        sp->top--;
        return val;
    }
}

int stackTop(struct stack * sp)
{
    return sp->arr[sp->top];
}

void displayStack(struct stack * sp)
{
    if(isEmpty(sp))
    {
        cout << "Stack is Empty\n";
    }
    int i = sp->top;
    while(i>= 0)
    {
        cout << sp->arr[i] << endl;
        i--;
    }
}

bool isOperator(char ch)
{
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
    {
        return true;
    }
    else
        return false;
}

int prec(char ch )
{
    if(ch == '*' || ch == '/')
    {
        return 3;
    }
    else if (ch == '+' || ch == '-')
    {
        return 2;
    }
    
    else
        return 0;
}
char * infixToPostFix(char * infix)
{
    struct stack * sp = (struct stack*)malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 20;
    sp->arr = (char*)malloc(sp->size * sizeof(char));
    char * postfix = (char*)malloc((strlen(infix)+1)*sizeof(char));
    
    int i,j;
    i = j = 0; // i will scan infix and j will fill postix
    
    while(infix[i]!= '\0')
    {
        if(!isOperator(infix[i]))
        {
            postfix[j] = infix[i];
            i++;
            j++;
        }
        else{
            if(prec(infix[i]) > prec(stackTop(sp)))
            {
                push(sp,infix[i]);
                i++;
            }
            else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    
    while(!isEmpty(sp))
    {
        postfix[j] = pop(sp);
        j++;
    }
    
    postfix[j] = '\0';
    return postfix;
}


int main()
{
    char * infix = "a+b-c/2";
    cout << infixToPostFix(infix);

    cout <<  endl;
    return 0;
}
    
